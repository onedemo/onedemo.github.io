<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OSPF</title>
    <link href="/2024/12/17/OSPF/"/>
    <url>/2024/12/17/OSPF/</url>
    
    <content type="html"><![CDATA[<h1 id="OSPF基础"><a href="#OSPF基础" class="headerlink" title="OSPF基础"></a>OSPF基础</h1><ul><li>ospf是基于链路状态的路由协议</li><li>基于OSPF算法实现</li><li>以“累计链路开销作为度量值选路”</li></ul><h2 id="OSPF工作过程"><a href="#OSPF工作过程" class="headerlink" title="OSPF工作过程"></a>OSPF工作过程</h2><ol><li>建立邻居</li><li>同步链路状态数据库</li><li>计算最优路由<br><img src="/2024/12/17/OSPF/ospf%E8%BF%87%E7%A8%8B.png" alt="ospf过程.png"></li></ol><h2 id="OSPF的建立过程"><a href="#OSPF的建立过程" class="headerlink" title="OSPF的建立过程"></a>OSPF的建立过程</h2><h3 id="一、邻居建立"><a href="#一、邻居建立" class="headerlink" title="一、邻居建立"></a>一、邻居建立</h3><p>ospf邻居建立通过Hello报文完成的<br>Hello报文作用</p><ul><li>邻居发现：自动发现邻居</li><li>邻居建立：完成Hello报文中的参数协商</li><li>邻居保持：通过Keepalive机制，检测邻居运行状态<br><img src="/2024/12/17/OSPF/Hello.png" alt="Hello.png"></li></ul><blockquote><p>对于不支持组播的网络可以通过手动配置实现邻居的发现与维护。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ospf</span> <span class="hljs-number">1</span><br>  <span class="hljs-attribute">peer</span> <span class="hljs-number">10.1.1.2</span> # 对端接口ip<br></code></pre></td></tr></table></figure></blockquote><h3 id="二、链路状态信息"><a href="#二、链路状态信息" class="headerlink" title="二、链路状态信息"></a>二、链路状态信息</h3><ul><li>链路类型</li><li>接口IP地址及掩码</li><li>链路上所连接的邻居路由器</li><li>链路的带宽（开销）<br><img src="/2024/12/17/OSPF/LSA.png" alt="LSA.png"></li></ul><h4 id="网络类型"><a href="#网络类型" class="headerlink" title="网络类型"></a>网络类型</h4><ol><li><p>P2P网络</p><ul><li>仅两台路由互联</li><li>支持广播、组播</li></ul></li></ol><p><img src="/2024/12/17/OSPF/p2p.png" alt="p2p.png"></p><ol start="2"><li><p>广播型网络</p><ul><li>两台或两台以上的路由器通过共享介质互连。</li><li>支持广播、组播。</li></ul></li></ol><p><img src="/2024/12/17/OSPF/%E5%B9%BF%E6%92%AD%E5%9E%8B.png" alt="广播型.png"></p><ol start="3"><li><p>NBMA网络</p><ul><li>两台或两台以上路由器通过VC互连。</li><li>不支持广播、组播。</li></ul></li></ol><p><img src="/2024/12/17/OSPF/NBMA.png" alt="NBMA.png"></p><ol start="4"><li><p>P2MP网络</p><ul><li>多个点到点网络的集合。</li><li>支持广播、组播。</li></ul></li></ol><p><img src="/2024/12/17/OSPF/P2MP.png" alt="P2MP.png"></p><h4 id="OSPF的度量方式"><a href="#OSPF的度量方式" class="headerlink" title="OSPF的度量方式"></a>OSPF的度量方式</h4><p>某接口cost&#x3D;参考带宽&#x2F;实际带宽。</p><p>更改cost的两种方式：</p><ul><li>直接在接口下配置；</li><li>修改参考带宽（所有路由器都需要修改，确保选路一致性）。</li></ul><blockquote><p>个人看法：路由的出接口；回传路由的入接口</p></blockquote><h3 id="三、报文类型及作用"><a href="#三、报文类型及作用" class="headerlink" title="三、报文类型及作用"></a>三、报文类型及作用</h3><p>OSPF报文协议号为89</p><h4 id="OSPF报文类型"><a href="#OSPF报文类型" class="headerlink" title="OSPF报文类型"></a>OSPF报文类型</h4><table><thead><tr><th>type</th><th>报文名称</th><th>报文功能</th></tr></thead><tbody><tr><td>1</td><td>Hello</td><td>发现和维护邻居关系</td></tr><tr><td>2</td><td>Database Description</td><td>交互链路状态数据库摘要</td></tr><tr><td>3</td><td>Link State Request</td><td>请求特定的链路状态信息</td></tr><tr><td>4</td><td>Link State Update</td><td>发送详细的链路状态信息</td></tr><tr><td>5</td><td>Link State Ack</td><td>发送确认报文</td></tr></tbody></table><h4 id="OSPF报文的功能需求"><a href="#OSPF报文的功能需求" class="headerlink" title="OSPF报文的功能需求"></a>OSPF报文的功能需求</h4><table><thead><tr><th>功能</th><th>实现分析</th></tr></thead><tbody><tr><td>发现邻居与保持</td><td>Hello机制即可实现</td></tr><tr><td>LSA同步</td><td>双方互相发送LSA，完成同步；同时同步速度更快，占用资源更少</td></tr><tr><td>可靠性</td><td>确保LSA同步过程的可靠性</td></tr></tbody></table><h3 id="四、LSDB同步过程"><a href="#四、LSDB同步过程" class="headerlink" title="四、LSDB同步过程"></a>四、LSDB同步过程</h3><p><img src="/2024/12/17/OSPF/LSDB.png" alt="LSDB.png"></p><ol><li>A向B发送DD报文</li><li>B回复A DD报文</li><li>A向B发送DD报文 这一步选举自从关系</li><li>这一步确定主从关系</li><li>继续确定</li><li>A向B请求LSA信息</li><li>B回复A 自己的LSA信息 A则自己计算路由</li><li>最后LSAck确定</li></ol><h3 id="五、DR与DBR的选举及作用"><a href="#五、DR与DBR的选举及作用" class="headerlink" title="五、DR与DBR的选举及作用"></a>五、DR与DBR的选举及作用</h3><p>在这个网络中就会出现 n×(n−1)&#x2F;2 个邻接关系<br>还有重复的LSA泛洪，浪费资源<br>这时就要选举DR跟BDR</p><p><img src="/2024/12/17/OSPF/MA%E7%BD%91%E7%BB%9C.png" alt="MA网络.png"></p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>减少邻居关系</li><li>降低OSPF协议流量</li></ul><h4 id="怎么选举"><a href="#怎么选举" class="headerlink" title="怎么选举"></a>怎么选举</h4><p>选举规则：DR&#x2F;BDR的选举是基于接口的。</p><ul><li>接口的DR优先级越大越优先。</li><li>接口的DR优先级相等时，Router ID越大越优先。</li><li>是不抢占机制，后加入到网络的的设备，就算接口优先级在高也不是DR</li><li>接口优先级为 0 不参与选举</li></ul><h3 id="邻居与邻接关系"><a href="#邻居与邻接关系" class="headerlink" title="邻居与邻接关系"></a>邻居与邻接关系</h3><table><thead><tr><th>网络类型</th><th>是否建立邻接关系</th></tr></thead><tbody><tr><td>P2P</td><td>是</td></tr><tr><td>Broadcast</td><td>DR与BDR 、DRother建立邻接关系BDR与DR、DRother建立邻接关系DRother之间只建立邻居关系</td></tr><tr><td>NBBMA</td><td>DR与BDR 、DRother建立邻接关系BDR与DR、DRother建立邻接关系DRother之间只建立邻居关系</td></tr><tr><td>P2MP</td><td>是</td></tr></tbody></table><h1 id="OSPF-域间路由"><a href="#OSPF-域间路由" class="headerlink" title="OSPF 域间路由"></a>OSPF 域间路由</h1><h2 id="ospf多区域"><a href="#ospf多区域" class="headerlink" title="ospf多区域"></a>ospf多区域</h2><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p>减少LSA的泛洪</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>同一区域 交互一类、二类LSA</p><h2 id="路由器角色："><a href="#路由器角色：" class="headerlink" title="路由器角色："></a>路由器角色：</h2><ul><li><p><strong>IR</strong>：所有接口都属于一个区域</p><ol><li>区域内路由器只需要维护本区域的路由</li></ol></li><li><p><strong>ABR</strong>：设备的接口分别连接多个区域</p><ol><li>但是边界路由器需要维护连接的区域的路由交换</li></ol></li></ul><p>ABR会将一个区域内的一类、二类LSA转换成三类 LSA 发送给别的区域，这时候就不是发送LSA信息了而是转换成路由信息发送别的区域（<strong>这个转换传输一定是双向的</strong>）</p><p>一个路由条目对应一个 <strong>三类LSA</strong>（ABR产生三类LSA）</p><h2 id="三类LSA的内容："><a href="#三类LSA的内容：" class="headerlink" title="三类LSA的内容："></a>三类LSA的内容：</h2><table><thead><tr><th>名字</th><th>解释</th></tr></thead><tbody><tr><td>LS Type</td><td>3类</td></tr><tr><td>LS ID</td><td>目标网段</td></tr><tr><td>ADV R</td><td>产生此三类LSA的Routr ID</td></tr><tr><td>Net mask</td><td>网络掩码</td></tr><tr><td>Tos 0</td><td>开销值</td></tr></tbody></table><h2 id="区域间路由计算"><a href="#区域间路由计算" class="headerlink" title="区域间路由计算"></a>区域间路由计算</h2><p><img src="/2024/12/17/OSPF/%E5%8C%BA%E5%9F%9F%E9%97%B4%E8%B7%AF%E7%94%B1%E8%AE%A1%E7%AE%97.png" alt="区域间路由计算.png"><br>AR3到达10.0.12.0 网络的cost值为  出接口3+521&#x3D;524。也就是AR3到达ABR的cost3+AR2本身的LSA3的cost值</p><h2 id="区域间路由防环机制"><a href="#区域间路由防环机制" class="headerlink" title="区域间路由防环机制"></a>区域间路由防环机制</h2><p>所有区域必须跟Area0相连</p><p>这种可以的<br><img src="/2024/12/17/OSPF/Area-OK.png" alt="Area-OK.png"></p><p>这种则是不可以的，违反了规则<br><img src="/2024/12/17/OSPF/Area-NO.png" alt="Area-NO.png"></p><h1 id="OSPF-域内路由"><a href="#OSPF-域内路由" class="headerlink" title="OSPF 域内路由"></a>OSPF 域内路由</h1>]]></content>
    
    
    <categories>
      
      <category>数通</category>
      
    </categories>
    
    
    <tags>
      
      <tag>华为</tag>
      
      <tag>HCIP</tag>
      
      <tag>OSPF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell</title>
    <link href="/2024/12/15/Shell-demo/"/>
    <url>/2024/12/15/Shell-demo/</url>
    
    <content type="html"><![CDATA[<h1 id="赛题"><a href="#赛题" class="headerlink" title="赛题"></a>赛题</h1><h4 id="（1）题目：检查当前系统中是否安装了某个特定的软件包。（根据系统实际情况进行解答）"><a href="#（1）题目：检查当前系统中是否安装了某个特定的软件包。（根据系统实际情况进行解答）" class="headerlink" title="（1）题目：检查当前系统中是否安装了某个特定的软件包。（根据系统实际情况进行解答）"></a>（1）题目：检查当前系统中是否安装了某个特定的软件包。（根据系统实际情况进行解答）</h4><p>注：获取用户输入进行软件包检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;包名：&quot;</span> <span class="hljs-variable">$str</span><br>rpm -q <span class="hljs-variable">$str</span> &amp;&gt; /dev/null<br></code></pre></td></tr></table></figure><h4 id="（2）题目：扫描指定目录下的所有文件，并列出其中所有符号链接的文件。"><a href="#（2）题目：扫描指定目录下的所有文件，并列出其中所有符号链接的文件。" class="headerlink" title="（2）题目：扫描指定目录下的所有文件，并列出其中所有符号链接的文件。"></a>（2）题目：扫描指定目录下的所有文件，并列出其中所有符号链接的文件。</h4><p>注：目录自定义，脚本正确即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入路径：&quot;</span> path<br>find <span class="hljs-variable">$path</span> -<span class="hljs-built_in">type</span> l<br></code></pre></td></tr></table></figure><h4 id="（3）题目：监控一个日志文件，并实时显示文件中新增的内容"><a href="#（3）题目：监控一个日志文件，并实时显示文件中新增的内容" class="headerlink" title="（3）题目：监控一个日志文件，并实时显示文件中新增的内容"></a>（3）题目：监控一个日志文件，并实时显示文件中新增的内容</h4><p>注：日志文件在&#x2F;var&#x2F;log&#x2F;messages</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bsh">#! /bin/bash<br><br>tail -f /var/log/messages<br></code></pre></td></tr></table></figure><h4 id="（4）题目：统计一个文本文件中每个单词出现的次数，并按出现次数排序输出。"><a href="#（4）题目：统计一个文本文件中每个单词出现的次数，并按出现次数排序输出。" class="headerlink" title="（4）题目：统计一个文本文件中每个单词出现的次数，并按出现次数排序输出。"></a>（4）题目：统计一个文本文件中每个单词出现的次数，并按出现次数排序输出。</h4><p>注：文件自定义,脚本正确即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入文件：&quot;</span> file<br><span class="hljs-built_in">tr</span> -sc <span class="hljs-string">&#x27;A-Za-z&#x27;</span> <span class="hljs-string">&#x27;\n&#x27;</span> &lt; <span class="hljs-variable">$file</span> | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;A-Z&#x27;</span> <span class="hljs-string">&#x27;a-z&#x27;</span> | sed  <span class="hljs-string">&#x27;/^$/d&#x27;</span> | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -nr<br></code></pre></td></tr></table></figure><h4 id="（5）题目：批量修改一组文件的文件名，将它们的扩展名从-txt改为-dat。"><a href="#（5）题目：批量修改一组文件的文件名，将它们的扩展名从-txt改为-dat。" class="headerlink" title="（5）题目：批量修改一组文件的文件名，将它们的扩展名从.txt改为.dat。"></a>（5）题目：批量修改一组文件的文件名，将它们的扩展名从.txt改为.dat。</h4><p>注：目录自定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入目录：&quot;</span> path<br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$path</span><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">ls</span> *.txt);<br><span class="hljs-keyword">do</span><br>        <span class="hljs-comment">#mv &quot;$file&quot; &quot;$&#123;file%.txt&#125;.dat&quot;</span><br>        name=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$file</span> | awk -F <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>)<br>        <span class="hljs-built_in">mv</span> <span class="hljs-variable">$file</span> <span class="hljs-variable">$name</span>.dat<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$file</span> --&gt; <span class="hljs-variable">$&#123;file%.txt&#125;</span>.dat&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="（6）题目：编写一个Shell脚本，从一个Web服务器上下载文件，并检查下载文件的完整性（例如，使用MD5或SHA256校验）。"><a href="#（6）题目：编写一个Shell脚本，从一个Web服务器上下载文件，并检查下载文件的完整性（例如，使用MD5或SHA256校验）。" class="headerlink" title="（6）题目：编写一个Shell脚本，从一个Web服务器上下载文件，并检查下载文件的完整性（例如，使用MD5或SHA256校验）。"></a>（6）题目：编写一个Shell脚本，从一个Web服务器上下载文件，并检查下载文件的完整性（例如，使用MD5或SHA256校验）。</h4><p>注：自定义url链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><br>md5_yuan=<span class="hljs-string">&quot;fc5dc492fc2655b38cc7183587307056&quot;</span><br>url=<span class="hljs-string">&quot;http://192.168.1.35/demo.txt&quot;</span><br>filename=$(<span class="hljs-built_in">basename</span> <span class="hljs-string">&quot;<span class="hljs-variable">$url</span>&quot;</span>)<br><br>wget -O <span class="hljs-string">&quot;<span class="hljs-variable">$filename</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$url</span>&quot;</span><br>md5_dow=$(<span class="hljs-built_in">md5sum</span> <span class="hljs-string">&quot;<span class="hljs-variable">$filename</span>&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>)<br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$de5_yuam</span>&quot;</span> -eq <span class="hljs-string">&quot;<span class="hljs-variable">$md5_dow</span>&quot;</span> ]];<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件下载完整&quot;</span><br><span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件下载不完整&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h4 id="（7）题目：编写一个Shell脚本，定期清理系统中某个目录下超过一定天数的临时文件。"><a href="#（7）题目：编写一个Shell脚本，定期清理系统中某个目录下超过一定天数的临时文件。" class="headerlink" title="（7）题目：编写一个Shell脚本，定期清理系统中某个目录下超过一定天数的临时文件。"></a>（7）题目：编写一个Shell脚本，定期清理系统中某个目录下超过一定天数的临时文件。</h4><p>注：下载目录自定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><br><span class="hljs-comment"># 定义7天</span><br>day=7<br>find . -<span class="hljs-built_in">type</span> f -mtime +<span class="hljs-string">&quot;<span class="hljs-variable">$day</span>&quot;</span> -delete<br></code></pre></td></tr></table></figure><h4 id="（8）题目：编写一个Shell脚本，从一个文本文件中提取所有的URL链接，并验证链接的有效性。"><a href="#（8）题目：编写一个Shell脚本，从一个文本文件中提取所有的URL链接，并验证链接的有效性。" class="headerlink" title="（8）题目：编写一个Shell脚本，从一个文本文件中提取所有的URL链接，并验证链接的有效性。"></a>（8）题目：编写一个Shell脚本，从一个文本文件中提取所有的URL链接，并验证链接的有效性。</h4><p>注：url自定义，脚本正确即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><br>URL_Done_List=()<br><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> url;<br><span class="hljs-keyword">do</span><br>        curl -s --<span class="hljs-built_in">head</span> <span class="hljs-variable">$url</span> &gt; /dev/null<br>        <span class="hljs-keyword">if</span> [[ $? -eq 0 ]];<span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;链接 <span class="hljs-variable">$url</span> 有效&quot;</span><br>        <span class="hljs-keyword">else</span><br>                URL_Done_List+=(<span class="hljs-string">&quot;<span class="hljs-variable">$url</span>&quot;</span>)<br>        <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span> &lt; url.txt<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;不可用链接：&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;URL_Done_List[@]&#125;</span>;<br><span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br><span class="hljs-keyword">done</span><br><span class="hljs-comment"># echo &quot;$&#123;URL_Done_List[@]&#125;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="（9）题目：编写一个Shell脚本，实现一个简单的数据库备份系统，定期备份指定的数据库到文件。"><a href="#（9）题目：编写一个Shell脚本，实现一个简单的数据库备份系统，定期备份指定的数据库到文件。" class="headerlink" title="（9）题目：编写一个Shell脚本，实现一个简单的数据库备份系统，定期备份指定的数据库到文件。"></a>（9）题目：编写一个Shell脚本，实现一个简单的数据库备份系统，定期备份指定的数据库到文件。</h4><p>注：mysql数据库的备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><br><span class="hljs-built_in">date</span>=$(<span class="hljs-built_in">date</span> +%Y%m%d-%H:%M.%S)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$date</span><br>mysqldump -uroot -padmin@123. <span class="hljs-built_in">test</span> &gt; mysqlbackup-<span class="hljs-variable">$date</span><br></code></pre></td></tr></table></figure><h4 id="（10）题目：编写一个Shell脚本，定期检查系统中所有用户的密码有效期，并提醒用户在密码过期前修改密码。"><a href="#（10）题目：编写一个Shell脚本，定期检查系统中所有用户的密码有效期，并提醒用户在密码过期前修改密码。" class="headerlink" title="（10）题目：编写一个Shell脚本，定期检查系统中所有用户的密码有效期，并提醒用户在密码过期前修改密码。"></a>（10）题目：编写一个Shell脚本，定期检查系统中所有用户的密码有效期，并提醒用户在密码过期前修改密码。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> user;<br><span class="hljs-keyword">do</span><br>        expire=$(chage -l <span class="hljs-variable">$user</span> | grep <span class="hljs-string">&quot;密码过期时间&quot;</span> | awk -F <span class="hljs-string">&quot;：&quot;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<br>        expiretime=$(<span class="hljs-built_in">date</span> -d <span class="hljs-variable">$expire</span> +%s)<br>        time=$(<span class="hljs-built_in">date</span> +%s)<br>        day=$((expiretime - time / (<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>)))<br>        <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$day</span> -le 7 ]];<span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;该改密码了&quot;</span><br>        <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span> &lt; &lt;(<span class="hljs-built_in">cut</span> -d: -f1 /etc/passwd)<br></code></pre></td></tr></table></figure><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/12/14/hello-world/"/>
    <url>/2024/12/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[google-site-verification: google9c071bd0db026699.html]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>小志</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h1 id="学习网络的热血青年"><a href="#学习网络的热血青年" class="headerlink" title="学习网络的热血青年"></a>学习网络的热血青年</h1><h4 id="最别人做不到事（在合理合法的情况下）"><a href="#最别人做不到事（在合理合法的情况下）" class="headerlink" title="最别人做不到事（在合理合法的情况下）"></a>最别人做不到事（在合理合法的情况下）</h4>]]></content>
    
  </entry>
  
  
  
</search>
